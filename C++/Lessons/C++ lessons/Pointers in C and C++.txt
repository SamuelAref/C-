Pointers in C & C++

     int a; //variable
     int *p; //pointer
     p = &a; //p holds address of a
     a = 10; // a is initialized


Pointer Arithmetic

 int a = 10;
     int *p;
     p = &a;

     //pointer arithmetic

     std::cout << p << "\n";
     std::cout << *p << "\n";
     std::cout << p+1 << "\n"; //size of integer plus 1
     std::cout << *(p+1) << "\n";

casting and void pointers

int main(){
       
       //use print f when using pointers
     int a = 1025;
     int *p;
     p = &a;
       
       printf(" address %d value %d \n",p, *p);
     //Type casting
     char *uu;
     uu = (char*)p;
     printf("address %d, value %d ",uu,*uu);

     //void pointer;

     void *vv;
     vv = p;
     printf("Address %d",vv);
     printf("Address %d",*vv);


  return 0;
}

pointer to pointer

int main(){

  //pointer to pointer
       
       int a = 5;
       int *p;
       p = &a;
       int **q; // you can go on like this but the before must be one less astrix
       q = &p;

       std::cout << p << " " << q << "content = " << *q;
     


  return 0;
}

Call by reference


void increment(int *p){

  *p = *p + 1;
  std::cout << *p << "\n";

}
int main(){

//pointers as function of arguments- call by reference
   
   int a = 10;
   increment(&a);
   std::cout << a;
  return 0;
}

Arrays and pointers

int main(){

//pointers and arrays
   
   int A[5] ={1,2,3};
   int *p;
   p = A;
   std::cout << &A[0] << "\n";
   std::cout << *A+1 << "\n";

   std::cout << *p << "\n";


  return 0;
}

Arrays in functions

int SumofArray(int A[],int size){

  int i,sum = 0;
  for(i = 0; i < size; i++){

    sum = sum + A[i];
    
  }
  return sum;
}

int main(){

  //in passing arrays to a function, we also need to pass
  //size of the array because we cant get the same result from
  // the sizeof function inside the function we created.

  int A[] = {1,2,3,4,5};
  int size = sizeof(A)/sizeof(A[0]);
  int total = SumofArray(A,size);

  std::cout << total;

  return 0;
}
